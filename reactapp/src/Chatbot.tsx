import React, { useState, useRef, useEffect } from 'react';

// ƒê·ªãnh nghƒ©a component Chatbot
const Chatbot = () => {
    // State l∆∞u tr·ªØ danh s√°ch tin nh·∫Øn, kh·ªüi t·∫°o v·ªõi m·ªôt tin nh·∫Øn ch√†o h·ªèi t·ª´ bot
    const [messages, setMessages] = useState([
        { sender: 'bot', text: 'Xin ch√†o! B·∫°n mu·ªën t√¨m phim g√¨?' }
    ]);
    // State l∆∞u tr·ªØ n·ªôi dung input c·ªßa ng∆∞·ªùi d√πng
    const [input, setInput] = useState('');
    // State theo d√µi tr·∫°ng th√°i t·∫£i khi g·ª≠i y√™u c·∫ßu API
    const [loading, setLoading] = useState(false);
    // State ki·ªÉm so√°t vi·ªác hi·ªÉn th·ªã/·∫©n giao di·ªán chatbot
    const [open, setOpen] = useState(false);
    // State theo d√µi tr·∫°ng th√°i ghi √¢m gi·ªçng n√≥i
    const [isRecording, setIsRecording] = useState(false);
    // Tham chi·∫øu ƒë·∫øn ƒë·ªëi t∆∞·ª£ng SpeechRecognition
    const recognitionRef = useRef<any>(null);
    // Tham chi·∫øu ƒë·∫øn ph·∫ßn t·ª≠ cu·ªëi danh s√°ch tin nh·∫Øn ƒë·ªÉ t·ª± ƒë·ªông cu·ªôn
    const messagesEndRef = useRef<HTMLDivElement>(null);
    // State l∆∞u tr·ªØ th√¥ng b√°o l·ªói (n·∫øu c√≥)
    const [error, setError] = useState<string | null>(null);
    // Danh s√°ch g·ª£i √Ω t√¨m ki·∫øm c·ªë ƒë·ªãnh
    const [suggestions] = useState([
        'Phim Trung Qu·ªëc',
        'Phim Nh·∫≠t B·∫£n',
        'Phim Vi·ªát Nam',
    ]);

    // useEffect ƒë·ªÉ t·ª± ƒë·ªông cu·ªôn xu·ªëng tin nh·∫Øn m·ªõi nh·∫•t
    useEffect(() => {
        if (messagesEndRef.current) {
            messagesEndRef.current.scrollIntoView({ behavior: 'smooth' }); // Cu·ªôn m∆∞·ª£t m√†
        }
    }, [messages, open]); // Ch·∫°y khi messages ho·∫∑c tr·∫°ng th√°i open thay ƒë·ªïi

    // useEffect ƒë·ªÉ x·ª≠ l√Ω ph√≠m ESC khi ƒëang ghi √¢m
    useEffect(() => {
        const handleEsc = (event: KeyboardEvent) => {
            if (event.key === 'Escape' && isRecording && recognitionRef.current) {
                recognitionRef.current.stop(); // D·ª´ng ghi √¢m khi nh·∫•n ESC
            }
        };
        window.addEventListener('keydown', handleEsc); // Th√™m s·ª± ki·ªán keydown
        return () => window.removeEventListener('keydown', handleEsc); // Cleanup khi component unmount
    }, [isRecording]);

    // H√†m kh·ªüi t·∫°o SpeechRecognition cho nh·∫≠n di·ªán gi·ªçng n√≥i
    const initializeSpeechRecognition = () => {
        // L·∫•y API SpeechRecognition t·ª´ tr√¨nh duy·ªát
        const SpeechRecognition = (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition;
        if (!SpeechRecognition) {
            setError('Tr√¨nh duy·ªát c·ªßa b·∫°n kh√¥ng h·ªó tr·ª£ nh·∫≠n di·ªán gi·ªçng n√≥i.');
            return null;
        }
        const recognition = new SpeechRecognition();
        recognition.lang = 'vi-VN'; // ƒê·∫∑t ng√¥n ng·ªØ l√† ti·∫øng Vi·ªát
        recognition.interimResults = false; // Kh√¥ng tr·∫£ k·∫øt qu·∫£ t·∫°m th·ªùi
        recognition.maxAlternatives = 1; // Ch·ªâ l·∫•y m·ªôt k·∫øt qu·∫£ t·ªët nh·∫•t

        // X·ª≠ l√Ω khi nh·∫≠n ƒë∆∞·ª£c k·∫øt qu·∫£ t·ª´ gi·ªçng n√≥i
        recognition.onresult = (event: any) => {
            const transcript = event.results[0][0].transcript; // L·∫•y vƒÉn b·∫£n t·ª´ gi·ªçng n√≥i
            setInput(transcript); // C·∫≠p nh·∫≠t input
            handleSend({ preventDefault: () => { } }); // G·ª≠i y√™u c·∫ßu t√¨m ki·∫øm
        };
        // X·ª≠ l√Ω l·ªói nh·∫≠n di·ªán gi·ªçng n√≥i
        recognition.onerror = (event: any) => {
            setMessages((msgs) => [
                ...msgs,
                { sender: 'bot', text: `L·ªói nh·∫≠n di·ªán gi·ªçng n√≥i: ${event.error}` }
            ]);
            setIsRecording(false); // D·ª´ng ghi √¢m
        };
        // Khi qu√° tr√¨nh ghi √¢m k·∫øt th√∫c
        recognition.onend = () => {
            setIsRecording(false); // C·∫≠p nh·∫≠t tr·∫°ng th√°i ghi √¢m
        };
        return recognition;
    };

    // X·ª≠ l√Ω s·ª± ki·ªán nh·∫•n n√∫t ghi √¢m
    const handleRecord = () => {
        setError(null); // X√≥a l·ªói tr∆∞·ªõc ƒë√≥
        if (!recognitionRef.current) {
            recognitionRef.current = initializeSpeechRecognition(); // Kh·ªüi t·∫°o SpeechRecognition
        }
        if (recognitionRef.current) {
            if (isRecording) {
                recognitionRef.current.stop(); // D·ª´ng ghi √¢m n·∫øu ƒëang ghi
            } else {
                recognitionRef.current.start(); // B·∫Øt ƒë·∫ßu ghi √¢m
                setIsRecording(true);
            }
        } else {
            setMessages((msgs) => [
                ...msgs,
                { sender: 'bot', text: 'Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ ghi √¢m.' }
            ]);
        }
    };

    // X·ª≠ l√Ω g·ª≠i tin nh·∫Øn ho·∫∑c y√™u c·∫ßu t√¨m ki·∫øm
    const handleSend = async (e: any) => {
        e.preventDefault(); // NgƒÉn h√†nh vi submit m·∫∑c ƒë·ªãnh
        if (!input.trim()) return; // Kh√¥ng x·ª≠ l√Ω n·∫øu input r·ªóng
        const userMessage = { sender: 'user', text: input }; // T·∫°o tin nh·∫Øn ng∆∞·ªùi d√πng
        setMessages((msgs) => [...msgs, userMessage]); // Th√™m tin nh·∫Øn v√†o danh s√°ch
        setLoading(true); // B·∫Øt ƒë·∫ßu tr·∫°ng th√°i t·∫£i
        try {
            // G·ª≠i y√™u c·∫ßu POST ƒë·∫øn API chatbot
            const res = await fetch('http://127.0.0.1:8000/api/chatbot', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': (document.querySelector('meta[name="csrf-token"]') as HTMLMetaElement)?.content || '' // L·∫•y CSRF token
                },
                body: JSON.stringify({ queryText: input }) // G·ª≠i n·ªôi dung input
            });
            const data = await res.json(); // L·∫•y d·ªØ li·ªáu t·ª´ API
            let botMessage;
            try {
                const parsedData = JSON.parse(data.fulfillmentText); // Ph√¢n t√≠ch d·ªØ li·ªáu t·ª´ API
                if (parsedData.type === 'film_list') {
                    botMessage = { sender: 'bot', films: parsedData.films }; // Tin nh·∫Øn ch·ª©a danh s√°ch phim
                } else {
                    botMessage = { sender: 'bot', text: parsedData.message || data.fulfillmentText }; // Tin nh·∫Øn vƒÉn b·∫£n
                }
            } catch {
                botMessage = { sender: 'bot', text: data.fulfillmentText }; // Tin nh·∫Øn vƒÉn b·∫£n m·∫∑c ƒë·ªãnh n·∫øu l·ªói
            }
            setMessages((msgs) => [...msgs, botMessage]); // Th√™m tin nh·∫Øn bot v√†o danh s√°ch
        } catch {
            // X·ª≠ l√Ω l·ªói khi g·ªçi API
            setMessages((msgs) => [
                ...msgs,
                { sender: 'bot', text: 'C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i.' }
            ]);
        }
        setInput(''); // X√≥a input sau khi g·ª≠i
        setLoading(false); // K·∫øt th√∫c tr·∫°ng th√°i t·∫£i
    };

    // X·ª≠ l√Ω ƒë√≥ng chatbot
    const handleClose = () => {
        setOpen(false); // ·∫®n chatbot
        if (isRecording && recognitionRef.current) {
            recognitionRef.current.stop(); // D·ª´ng ghi √¢m n·∫øu ƒëang ghi
        }
    };

    return (
        <>
            {/* N√∫t m·ªü/ƒë√≥ng chatbot */}
            <button
                onClick={() => setOpen((o) => !o)}
                style={{
                    position: 'fixed',
                    bottom: 4,
                    right: 32,
                    zIndex: 1000,
                    background: isRecording ? '#ff4444' : '#4f8cff', // M√†u ƒë·ªè khi ghi √¢m, xanh khi kh√¥ng
                    color: '#fff',
                    border: 'none',
                    borderRadius: '50%',
                    width: 56,
                    height: 56,
                    boxShadow: '0 2px 8px #aaa',
                    fontSize: 28,
                    cursor: 'pointer',
                    display: open ? 'none' : 'flex', // ·∫®n n√∫t khi chatbot m·ªü
                    alignItems: 'center',
                    justifyContent: 'center',
                    transition: 'background 0.2s',
                    animation: isRecording ? 'pulse 1s infinite' : 'none', // Hi·ªáu ·ª©ng khi ghi √¢m
                }}
            >
                {isRecording ? 'üé§' : 'üí¨'} {/* Bi·ªÉu t∆∞·ª£ng mic ho·∫∑c chat */}
            </button>
            {/* Giao di·ªán chatbot khi m·ªü */}
            {open && (
                <div style={{
                    position: 'fixed', bottom: 32, right: 32, zIndex: 1000, maxWidth: 400, width: '90vw', height: 500,
                    border: '1px solid #eee',
                    borderRadius: 12,
                    boxShadow: '0 2px 16px #aaa',
                    background: '#fff',
                    display: 'flex',
                    flexDirection: 'column',
                }}
                >
                    {/* Ti√™u ƒë·ªÅ chatbot */}
                    <div style={{ padding: 12, borderBottom: '1px solid #eee', background: '#4f8cff', color: '#fff', borderTopLeftRadius: 12, borderTopRightRadius: 12, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                        <span>Chatbot GoFilm</span>
                        <button onClick={handleClose} style={{ background: 'none', border: 'none', color: '#fff', fontSize: 22, cursor: 'pointer' }} aria-label="ƒê√≥ng">√ó</button>
                    </div>
                    {/* Khu v·ª±c hi·ªÉn th·ªã tin nh·∫Øn */}
                    <div style={{ flex: 1, overflowY: 'auto', padding: 16 }}>
                        {messages.map((msg, idx) => (
                            <div key={idx} style={{ textAlign: msg.sender === 'user' ? 'right' : 'left', margin: '8px 0' }}>
                                <span
                                    style={{
                                        display: 'inline-block',
                                        background: msg.sender === 'user' ? '#4f8cff' : '#f1f1f1', // M√†u xanh cho ng∆∞·ªùi d√πng, x√°m cho bot
                                        color: msg.sender === 'user' ? '#fff' : '#222',
                                        borderRadius: 16,
                                        padding: '8px 16px',
                                        maxWidth: '80%',
                                        wordBreak: 'break-word',
                                        whiteSpace: 'pre-line',
                                    }}
                                >
                                    {msg.films ? (
                                        // Hi·ªÉn th·ªã danh s√°ch phim n·∫øu c√≥
                                        <div>
                                            <strong style={{ display: 'block', marginBottom: 8, color: '#4f8cff' }}>Danh s√°ch phim g·ª£i √Ω:</strong>
                                            <ul style={{ paddingLeft: 16, margin: 0 }}>
                                                {msg.films.map((film: any, i: number) => (
                                                    <li key={i} style={{ marginBottom: 16, textAlign: 'left' }}>
                                                        {film.thumb && (
                                                            <img
                                                                src={film.thumb}
                                                                alt={film.title}
                                                                style={{
                                                                    width: '100%',
                                                                    maxHeight: 150,
                                                                    objectFit: 'cover',
                                                                    borderRadius: 8,
                                                                    marginBottom: 8
                                                                }}
                                                                onError={(e) => {
                                                                    e.currentTarget.style.display = 'none'; // ·∫®n ·∫£nh n·∫øu l·ªói
                                                                }}
                                                            />
                                                        )}
                                                        <strong style={{ color: '#4f8cff' }}>{film.title}</strong><br />
                                                        <span style={{ fontSize: 13 }}>{film.description}</span><br />
                                                        <a href={film.link} style={{ color: '#10B981', fontSize: 13 }} target="_blank" rel="noopener noreferrer">Xem chi ti·∫øt</a>
                                                    </li>
                                                ))}
                                            </ul>
                                        </div>
                                    ) : (
                                        msg.text // Hi·ªÉn th·ªã tin nh·∫Øn vƒÉn b·∫£n
                                    )}
                                </span>
                            </div>
                        ))}
                        <div ref={messagesEndRef} /> {/* ƒêi·ªÉm neo ƒë·ªÉ cu·ªôn xu·ªëng */}
                        {loading && <div style={{ color: '#888', fontStyle: 'italic' }}>ƒêang tr·∫£ l·ªùi...</div>}
                        {isRecording && (
                            // Hi·ªÉn th·ªã tr·∫°ng th√°i ghi √¢m
                            <div style={{ display: 'flex', alignItems: 'center', marginBottom: 8 }}>
                                <div style={{ marginRight: 8, color: '#ff4444', fontWeight: 600, fontStyle: 'italic' }}>üé§ ƒêang ghi √¢m... (nh·∫•n ESC ƒë·ªÉ d·ª´ng)</div>
                                <div style={{ display: 'flex', alignItems: 'flex-end', height: 24 }}>
                                    {[0, 1, 2, 3, 4].map(i => (
                                        <div
                                            key={i}
                                            style={{
                                                width: 4,
                                                height: 8 + Math.abs((i % 3) - 1) * 8,
                                                margin: '0 2px',
                                                background: '#ff4444',
                                                borderRadius: 2,
                                                animation: `wave 1s ${(i * 0.1)}s infinite ease-in-out`, // Hi·ªáu ·ª©ng s√≥ng
                                            }}
                                        />
                                    ))}
                                </div>
                            </div>
                        )}
                        {error && <div style={{ color: '#EF4444', fontWeight: 600 }}>{error}</div>} {/* Hi·ªÉn th·ªã l·ªói n·∫øu c√≥ */}
                    </div>
                    {/* Form nh·∫≠p li·ªáu v√† n√∫t ƒëi·ªÅu khi·ªÉn */}
                    <form onSubmit={handleSend} style={{ display: 'flex', borderTop: '1px solid #eee', padding: 8 }}>
                        <input
                            type="text"
                            value={input}
                            onChange={e => setInput(e.target.value)}
                            placeholder="Nh·∫≠p c√¢u h·ªèi ho·∫∑c d√πng gi·ªçng n√≥i..."
                            style={{ flex: 1, border: 'none', outline: 'none', padding: 8, fontSize: 16, color: '#222', background: '#fff' }}
                            disabled={loading} // V√¥ hi·ªáu h√≥a khi ƒëang t·∫£i
                            autoFocus // T·ª± ƒë·ªông focus v√†o input
                        />
                        <button
                            type="button"
                            onClick={handleRecord}
                            disabled={loading}
                            style={{
                                background: isRecording ? '#ff4444' : '#4f8cff', // M√†u ƒë·ªè khi ghi √¢m
                                color: '#fff',
                                border: 'none',
                                borderRadius: 8,
                                padding: '0 16px',
                                marginLeft: 8,
                                fontSize: 16,
                                cursor: 'pointer',
                                transition: 'background 0.2s',
                                animation: isRecording ? 'pulse 1s infinite' : 'none',
                            }}
                        >
                            {isRecording ? '‚èπ D·ª´ng' : 'üéô Ghi'} {/* N√∫t ghi √¢m/d·ª´ng */}
                        </button>
                        <button
                            type="submit"
                            disabled={loading || !input.trim()} // V√¥ hi·ªáu h√≥a n·∫øu ƒëang t·∫£i ho·∫∑c input r·ªóng
                            style={{
                                background: '#4f8cff',
                                color: '#fff',
                                border: 'none',
                                borderRadius: 8,
                                padding: '0 16px',
                                marginLeft: 8,
                                fontSize: 16,
                                cursor: 'pointer'
                            }}
                        >
                            G·ª≠i
                        </button>
                    </form>
                    {/* Danh s√°ch c√°c g·ª£i √Ω t√¨m ki·∫øm */}
                    <div style={{ display: 'flex', flexWrap: 'wrap', gap: 8, padding: 8 }}>
                        {suggestions.map((suggestion, i) => (
                            <button
                                key={i}
                                onClick={() => {
                                    setInput(suggestion); // ƒê·∫∑t input l√† g·ª£i √Ω
                                    handleSend({ preventDefault: () => { } }); // G·ª≠i y√™u c·∫ßu
                                }}
                                style={{
                                    background: '#4f8cff',
                                    color: '#fff',
                                    border: 'none',
                                    borderRadius: 8,
                                    padding: '6px 12px',
                                    cursor: 'pointer'
                                }}
                            >
                                {suggestion}
                            </button>
                        ))}
                    </div>
                </div>
            )}
            {/* CSS t√πy ch·ªânh cho hi·ªáu ·ª©ng */}
            <style>{`
                @keyframes pulse {
                    0% { box-shadow: 0 0 0 0 #ff444480; }
                    70% { box-shadow: 0 0 0 10px #ff444400; }
                    100% { box-shadow: 0 0 0 0 #ff444400; }
                }
                @keyframes wave {
                    0%, 100% { transform: scaleY(1); }
                    50% { transform: scaleY(2); }
                }
            `}</style>
        </>
    );
};

export default Chatbot;